openapi: 3.0.3
info:
  title: Learning Rest Framework
  version: 1.0.0
  description: 'Learning backend as much as i can , api / serialization / ORM '
paths:
  /auth/login/:
    post:
      operationId: auth_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /auth/signup/:
    post:
      operationId: auth_signup_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignup'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserSignup'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserSignup'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSignup'
          description: ''
  /auth/token/refresh/:
    post:
      operationId: auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /hostel/:
    get:
      operationId: hostel_list
      tags:
      - hostel
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hostel'
          description: ''
  /latest_customers/:
    get:
      operationId: latest_customers_list
      tags:
      - latest_customers
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LatestCustomers'
          description: ''
  /student/:
    get:
      operationId: student_list
      parameters:
      - in: query
        name: max_age
        schema:
          type: integer
      - in: query
        name: min_age
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - student
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StudentRecord'
          description: ''
components:
  schemas:
    Furniture:
      type: object
      properties:
        ceiling_fan:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        table:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        chair:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        refrigerator:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
    Hostel:
      type: object
      properties:
        name:
          type: string
          maxLength: 200
        rooms:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        occupied:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        floors:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        furniture:
          $ref: '#/components/schemas/Furniture'
        location:
          type: string
          nullable: true
          maxLength: 300
      required:
      - furniture
      - name
    LatestCustomers:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 200
        email:
          type: string
          format: email
          maxLength: 254
      required:
      - email
      - id
      - name
    StudentDetail:
      type: object
      properties:
        name:
          type: string
          maxLength: 200
        age:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        father_name:
          type: string
          maxLength: 200
      required:
      - father_name
      - name
    StudentRecord:
      type: object
      properties:
        status:
          type: string
          readOnly: true
        room_number:
          type: string
          maxLength: 50
        hostel_number:
          type: string
          maxLength: 50
        date:
          type: string
          format: date
          readOnly: true
        duration:
          type: string
          readOnly: true
        check_in_time:
          type: string
          format: date-time
          nullable: true
        check_out_time:
          type: string
          format: date-time
          nullable: true
        student:
          $ref: '#/components/schemas/StudentDetail'
        student_name:
          type: string
      required:
      - date
      - duration
      - hostel_number
      - room_number
      - status
      - student
      - student_name
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    UserSignup:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
          maxLength: 128
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
      required:
      - password
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
